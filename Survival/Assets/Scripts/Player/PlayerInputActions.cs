//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Movement Map"",
            ""id"": ""9c336543-0736-47c5-8722-82c3ec6d37fa"",
            ""actions"": [
                {
                    ""name"": ""Movement Action"",
                    ""type"": ""Value"",
                    ""id"": ""8a5f57f4-2520-4829-80ed-f445f4adbd80"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7992922a-69df-4296-8e15-fdaafd86348b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement Action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""130ea846-9b6a-4357-ad66-55e1a26b33b7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerScheme"",
                    ""action"": ""Movement Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5738c41f-0c4e-4190-a22c-b7c4bcde6f6a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerScheme"",
                    ""action"": ""Movement Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a1dd367f-72e1-4923-abe7-cf7cf53f926a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerScheme"",
                    ""action"": ""Movement Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2167d52f-708f-4272-b93c-c153555bd90b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerScheme"",
                    ""action"": ""Movement Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Item Map"",
            ""id"": ""7853119b-03bb-496a-ae29-57210f3bf086"",
            ""actions"": [
                {
                    ""name"": ""Item Use"",
                    ""type"": ""Button"",
                    ""id"": ""9bcafde6-3de8-4eda-93b8-c4c6a0f94efe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""13eaac07-dc7f-43b4-87b1-f0637d096314"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""97f94e7b-1a71-4bb2-80eb-d08d32b17d1a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Item Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""004ecf74-805a-4974-99e2-9d106cb97708"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerScheme"",
            ""bindingGroup"": ""PlayerScheme"",
            ""devices"": []
        }
    ]
}");
        // Movement Map
        m_MovementMap = asset.FindActionMap("Movement Map", throwIfNotFound: true);
        m_MovementMap_MovementAction = m_MovementMap.FindAction("Movement Action", throwIfNotFound: true);
        // Item Map
        m_ItemMap = asset.FindActionMap("Item Map", throwIfNotFound: true);
        m_ItemMap_ItemUse = m_ItemMap.FindAction("Item Use", throwIfNotFound: true);
        m_ItemMap_ReloadWeapon = m_ItemMap.FindAction("Reload Weapon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement Map
    private readonly InputActionMap m_MovementMap;
    private List<IMovementMapActions> m_MovementMapActionsCallbackInterfaces = new List<IMovementMapActions>();
    private readonly InputAction m_MovementMap_MovementAction;
    public struct MovementMapActions
    {
        private @PlayerInputActions m_Wrapper;
        public MovementMapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementAction => m_Wrapper.m_MovementMap_MovementAction;
        public InputActionMap Get() { return m_Wrapper.m_MovementMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementMapActions set) { return set.Get(); }
        public void AddCallbacks(IMovementMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementMapActionsCallbackInterfaces.Add(instance);
            @MovementAction.started += instance.OnMovementAction;
            @MovementAction.performed += instance.OnMovementAction;
            @MovementAction.canceled += instance.OnMovementAction;
        }

        private void UnregisterCallbacks(IMovementMapActions instance)
        {
            @MovementAction.started -= instance.OnMovementAction;
            @MovementAction.performed -= instance.OnMovementAction;
            @MovementAction.canceled -= instance.OnMovementAction;
        }

        public void RemoveCallbacks(IMovementMapActions instance)
        {
            if (m_Wrapper.m_MovementMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementMapActions @MovementMap => new MovementMapActions(this);

    // Item Map
    private readonly InputActionMap m_ItemMap;
    private List<IItemMapActions> m_ItemMapActionsCallbackInterfaces = new List<IItemMapActions>();
    private readonly InputAction m_ItemMap_ItemUse;
    private readonly InputAction m_ItemMap_ReloadWeapon;
    public struct ItemMapActions
    {
        private @PlayerInputActions m_Wrapper;
        public ItemMapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ItemUse => m_Wrapper.m_ItemMap_ItemUse;
        public InputAction @ReloadWeapon => m_Wrapper.m_ItemMap_ReloadWeapon;
        public InputActionMap Get() { return m_Wrapper.m_ItemMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ItemMapActions set) { return set.Get(); }
        public void AddCallbacks(IItemMapActions instance)
        {
            if (instance == null || m_Wrapper.m_ItemMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ItemMapActionsCallbackInterfaces.Add(instance);
            @ItemUse.started += instance.OnItemUse;
            @ItemUse.performed += instance.OnItemUse;
            @ItemUse.canceled += instance.OnItemUse;
            @ReloadWeapon.started += instance.OnReloadWeapon;
            @ReloadWeapon.performed += instance.OnReloadWeapon;
            @ReloadWeapon.canceled += instance.OnReloadWeapon;
        }

        private void UnregisterCallbacks(IItemMapActions instance)
        {
            @ItemUse.started -= instance.OnItemUse;
            @ItemUse.performed -= instance.OnItemUse;
            @ItemUse.canceled -= instance.OnItemUse;
            @ReloadWeapon.started -= instance.OnReloadWeapon;
            @ReloadWeapon.performed -= instance.OnReloadWeapon;
            @ReloadWeapon.canceled -= instance.OnReloadWeapon;
        }

        public void RemoveCallbacks(IItemMapActions instance)
        {
            if (m_Wrapper.m_ItemMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IItemMapActions instance)
        {
            foreach (var item in m_Wrapper.m_ItemMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ItemMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ItemMapActions @ItemMap => new ItemMapActions(this);
    private int m_PlayerSchemeSchemeIndex = -1;
    public InputControlScheme PlayerSchemeScheme
    {
        get
        {
            if (m_PlayerSchemeSchemeIndex == -1) m_PlayerSchemeSchemeIndex = asset.FindControlSchemeIndex("PlayerScheme");
            return asset.controlSchemes[m_PlayerSchemeSchemeIndex];
        }
    }
    public interface IMovementMapActions
    {
        void OnMovementAction(InputAction.CallbackContext context);
    }
    public interface IItemMapActions
    {
        void OnItemUse(InputAction.CallbackContext context);
        void OnReloadWeapon(InputAction.CallbackContext context);
    }
}
