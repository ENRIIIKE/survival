//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player Map"",
            ""id"": ""9c336543-0736-47c5-8722-82c3ec6d37fa"",
            ""actions"": [
                {
                    ""name"": ""Movement Action"",
                    ""type"": ""Value"",
                    ""id"": ""8a5f57f4-2520-4829-80ed-f445f4adbd80"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Item Use"",
                    ""type"": ""Button"",
                    ""id"": ""6284ba1a-bc37-4f53-9cac-70b8d91d72e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""3129f816-4d3b-444b-97d9-02c4148af767"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7992922a-69df-4296-8e15-fdaafd86348b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement Action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""130ea846-9b6a-4357-ad66-55e1a26b33b7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerScheme"",
                    ""action"": ""Movement Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5738c41f-0c4e-4190-a22c-b7c4bcde6f6a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerScheme"",
                    ""action"": ""Movement Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a1dd367f-72e1-4923-abe7-cf7cf53f926a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerScheme"",
                    ""action"": ""Movement Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2167d52f-708f-4272-b93c-c153555bd90b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerScheme"",
                    ""action"": ""Movement Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ae4f4da0-9dfd-49c2-a93f-58cb47b327d5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Item Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96b3d781-8756-4f9a-a116-e0fc2791a51e"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI Map"",
            ""id"": ""c5137b60-492e-4022-bfdd-0fcbd92e4d03"",
            ""actions"": [
                {
                    ""name"": ""Open Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""48529c0b-cbbe-4d92-b41a-38c417391b98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""00ffc431-647b-4fb4-8e05-784ced1ff005"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerScheme"",
            ""bindingGroup"": ""PlayerScheme"",
            ""devices"": []
        }
    ]
}");
        // Player Map
        m_PlayerMap = asset.FindActionMap("Player Map", throwIfNotFound: true);
        m_PlayerMap_MovementAction = m_PlayerMap.FindAction("Movement Action", throwIfNotFound: true);
        m_PlayerMap_ItemUse = m_PlayerMap.FindAction("Item Use", throwIfNotFound: true);
        m_PlayerMap_ReloadWeapon = m_PlayerMap.FindAction("Reload Weapon", throwIfNotFound: true);
        // UI Map
        m_UIMap = asset.FindActionMap("UI Map", throwIfNotFound: true);
        m_UIMap_OpenInventory = m_UIMap.FindAction("Open Inventory", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Map
    private readonly InputActionMap m_PlayerMap;
    private List<IPlayerMapActions> m_PlayerMapActionsCallbackInterfaces = new List<IPlayerMapActions>();
    private readonly InputAction m_PlayerMap_MovementAction;
    private readonly InputAction m_PlayerMap_ItemUse;
    private readonly InputAction m_PlayerMap_ReloadWeapon;
    public struct PlayerMapActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerMapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementAction => m_Wrapper.m_PlayerMap_MovementAction;
        public InputAction @ItemUse => m_Wrapper.m_PlayerMap_ItemUse;
        public InputAction @ReloadWeapon => m_Wrapper.m_PlayerMap_ReloadWeapon;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Add(instance);
            @MovementAction.started += instance.OnMovementAction;
            @MovementAction.performed += instance.OnMovementAction;
            @MovementAction.canceled += instance.OnMovementAction;
            @ItemUse.started += instance.OnItemUse;
            @ItemUse.performed += instance.OnItemUse;
            @ItemUse.canceled += instance.OnItemUse;
            @ReloadWeapon.started += instance.OnReloadWeapon;
            @ReloadWeapon.performed += instance.OnReloadWeapon;
            @ReloadWeapon.canceled += instance.OnReloadWeapon;
        }

        private void UnregisterCallbacks(IPlayerMapActions instance)
        {
            @MovementAction.started -= instance.OnMovementAction;
            @MovementAction.performed -= instance.OnMovementAction;
            @MovementAction.canceled -= instance.OnMovementAction;
            @ItemUse.started -= instance.OnItemUse;
            @ItemUse.performed -= instance.OnItemUse;
            @ItemUse.canceled -= instance.OnItemUse;
            @ReloadWeapon.started -= instance.OnReloadWeapon;
            @ReloadWeapon.performed -= instance.OnReloadWeapon;
            @ReloadWeapon.canceled -= instance.OnReloadWeapon;
        }

        public void RemoveCallbacks(IPlayerMapActions instance)
        {
            if (m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMapActions @PlayerMap => new PlayerMapActions(this);

    // UI Map
    private readonly InputActionMap m_UIMap;
    private List<IUIMapActions> m_UIMapActionsCallbackInterfaces = new List<IUIMapActions>();
    private readonly InputAction m_UIMap_OpenInventory;
    public struct UIMapActions
    {
        private @PlayerInputActions m_Wrapper;
        public UIMapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenInventory => m_Wrapper.m_UIMap_OpenInventory;
        public InputActionMap Get() { return m_Wrapper.m_UIMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIMapActions set) { return set.Get(); }
        public void AddCallbacks(IUIMapActions instance)
        {
            if (instance == null || m_Wrapper.m_UIMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIMapActionsCallbackInterfaces.Add(instance);
            @OpenInventory.started += instance.OnOpenInventory;
            @OpenInventory.performed += instance.OnOpenInventory;
            @OpenInventory.canceled += instance.OnOpenInventory;
        }

        private void UnregisterCallbacks(IUIMapActions instance)
        {
            @OpenInventory.started -= instance.OnOpenInventory;
            @OpenInventory.performed -= instance.OnOpenInventory;
            @OpenInventory.canceled -= instance.OnOpenInventory;
        }

        public void RemoveCallbacks(IUIMapActions instance)
        {
            if (m_Wrapper.m_UIMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIMapActions instance)
        {
            foreach (var item in m_Wrapper.m_UIMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIMapActions @UIMap => new UIMapActions(this);
    private int m_PlayerSchemeSchemeIndex = -1;
    public InputControlScheme PlayerSchemeScheme
    {
        get
        {
            if (m_PlayerSchemeSchemeIndex == -1) m_PlayerSchemeSchemeIndex = asset.FindControlSchemeIndex("PlayerScheme");
            return asset.controlSchemes[m_PlayerSchemeSchemeIndex];
        }
    }
    public interface IPlayerMapActions
    {
        void OnMovementAction(InputAction.CallbackContext context);
        void OnItemUse(InputAction.CallbackContext context);
        void OnReloadWeapon(InputAction.CallbackContext context);
    }
    public interface IUIMapActions
    {
        void OnOpenInventory(InputAction.CallbackContext context);
    }
}
